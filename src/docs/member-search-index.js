memberSearchIndex = [{"p":"pieces","c":"Bishop","l":"Bishop(String, boolean)","u":"%3Cinit%3E(java.lang.String,boolean)"},{"p":"board","c":"Board","l":"Board()","u":"%3Cinit%3E()"},{"p":"board","c":"Cell","l":"Cell(int, int, boolean)","u":"%3Cinit%3E(int,int,boolean)"},{"p":"chess","c":"Chess","l":"Chess()","u":"%3Cinit%3E()"},{"p":"board","c":"Board","l":"clone()"},{"p":"board","c":"Cell","l":"clone()"},{"p":"pieces","c":"Bishop","l":"clone()"},{"p":"pieces","c":"King","l":"clone()"},{"p":"pieces","c":"Knight","l":"clone()"},{"p":"pieces","c":"Pawn","l":"clone()"},{"p":"pieces","c":"Pieces","l":"clone()"},{"p":"pieces","c":"Queen","l":"clone()"},{"p":"pieces","c":"Rook","l":"clone()"},{"p":"chess","c":"Chess","l":"empasingUpdate(Board)","u":"empasingUpdate(board.Board)"},{"p":"board","c":"Cell","l":"getBlack()"},{"p":"pieces","c":"Pieces","l":"getCastlingDone()"},{"p":"board","c":"Board","l":"getCell(int, int)","u":"getCell(int,int)"},{"p":"board","c":"Cell","l":"getCol()"},{"p":"board","c":"Cell","l":"getEnpassingRound()"},{"p":"pieces","c":"Pieces","l":"getFirstmove()"},{"p":"pieces","c":"Pieces","l":"getHasMoved()"},{"p":"board","c":"Cell","l":"getIfEmpty()"},{"p":"board","c":"Cell","l":"getName()"},{"p":"board","c":"Cell","l":"getPiece()"},{"p":"pieces","c":"Pieces","l":"getPromoted()"},{"p":"pieces","c":"Pieces","l":"getPromoteRole()"},{"p":"board","c":"Cell","l":"getRow()"},{"p":"pieces","c":"Pieces","l":"getType()"},{"p":"pieces","c":"Pieces","l":"getUnderCheck()"},{"p":"chess","c":"Chess","l":"ifCheck(Board, boolean)","u":"ifCheck(board.Board,boolean)"},{"p":"chess","c":"Chess","l":"ifCheckmate(Board, boolean)","u":"ifCheckmate(board.Board,boolean)"},{"p":"chess","c":"Chess","l":"ifValidMove(Board, String, String, boolean, String)","u":"ifValidMove(board.Board,java.lang.String,java.lang.String,boolean,java.lang.String)"},{"p":"pieces","c":"King","l":"isValidCastling(Board, Cell, Cell)","u":"isValidCastling(board.Board,board.Cell,board.Cell)"},{"p":"pieces","c":"Pieces","l":"isWhite()"},{"p":"pieces","c":"King","l":"King(String, boolean, boolean, boolean)","u":"%3Cinit%3E(java.lang.String,boolean,boolean,boolean)"},{"p":"pieces","c":"Knight","l":"Knight(String, boolean)","u":"%3Cinit%3E(java.lang.String,boolean)"},{"p":"chess","c":"Chess","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"chess","c":"Chess","l":"move(Board, String, String)","u":"move(board.Board,java.lang.String,java.lang.String)"},{"p":"chess","c":"Chess","l":"moveAndCheck(Board, int, int, boolean)","u":"moveAndCheck(board.Board,int,int,boolean)"},{"p":"pieces","c":"Pawn","l":"Pawn(String, boolean, String, boolean, boolean)","u":"%3Cinit%3E(java.lang.String,boolean,java.lang.String,boolean,boolean)"},{"p":"pieces","c":"Pieces","l":"Pieces(String, boolean, String, boolean, boolean, boolean, boolean)","u":"%3Cinit%3E(java.lang.String,boolean,java.lang.String,boolean,boolean,boolean,boolean)"},{"p":"pieces","c":"Queen","l":"Queen(String, boolean)","u":"%3Cinit%3E(java.lang.String,boolean)"},{"p":"board","c":"Cell","l":"removePiece()"},{"p":"board","c":"Cell","l":"resetEnpassingRound()"},{"p":"pieces","c":"Rook","l":"Rook(String, boolean, boolean)","u":"%3Cinit%3E(java.lang.String,boolean,boolean)"},{"p":"pieces","c":"Bishop","l":"rule(Board, Cell, Cell, String)","u":"rule(board.Board,board.Cell,board.Cell,java.lang.String)"},{"p":"pieces","c":"King","l":"rule(Board, Cell, Cell, String)","u":"rule(board.Board,board.Cell,board.Cell,java.lang.String)"},{"p":"pieces","c":"Knight","l":"rule(Board, Cell, Cell, String)","u":"rule(board.Board,board.Cell,board.Cell,java.lang.String)"},{"p":"pieces","c":"Pawn","l":"rule(Board, Cell, Cell, String)","u":"rule(board.Board,board.Cell,board.Cell,java.lang.String)"},{"p":"pieces","c":"Pieces","l":"rule(Board, Cell, Cell, String)","u":"rule(board.Board,board.Cell,board.Cell,java.lang.String)"},{"p":"pieces","c":"Queen","l":"rule(Board, Cell, Cell, String)","u":"rule(board.Board,board.Cell,board.Cell,java.lang.String)"},{"p":"pieces","c":"Rook","l":"rule(Board, Cell, Cell, String)","u":"rule(board.Board,board.Cell,board.Cell,java.lang.String)"},{"p":"board","c":"Cell","l":"setBlack(char)"},{"p":"pieces","c":"Pieces","l":"setCastlingDone(boolean)"},{"p":"board","c":"Board","l":"setCell(Cell, int, int)","u":"setCell(board.Cell,int,int)"},{"p":"board","c":"Cell","l":"setCol(int)"},{"p":"board","c":"Cell","l":"setEnpassingRound()"},{"p":"board","c":"Cell","l":"setEnpassingRound(int)"},{"p":"pieces","c":"Pieces","l":"setFirstmove(boolean)"},{"p":"pieces","c":"Pieces","l":"setHasMoved(boolean)"},{"p":"board","c":"Cell","l":"setIfEmpty(boolean)"},{"p":"board","c":"Cell","l":"setName(String)","u":"setName(java.lang.String)"},{"p":"board","c":"Cell","l":"setPiece(Pieces)","u":"setPiece(pieces.Pieces)"},{"p":"pieces","c":"Pieces","l":"setPromoted(boolean)"},{"p":"pieces","c":"Pieces","l":"setPromoteRole(String)","u":"setPromoteRole(java.lang.String)"},{"p":"board","c":"Cell","l":"setRow(int)"},{"p":"pieces","c":"Pieces","l":"setUnderCheck(boolean)"},{"p":"board","c":"Board","l":"show()"},{"p":"chess","c":"Chess","l":"stringConvert(int, int)","u":"stringConvert(int,int)"},{"p":"chess","c":"Chess","l":"tryEveryMove(Board, int, int, boolean)","u":"tryEveryMove(board.Board,int,int,boolean)"},{"p":"chess","c":"Chess","l":"updateCheck(Board, boolean, boolean)","u":"updateCheck(board.Board,boolean,boolean)"}];updateSearchResults();